/*
 * This file is generated by jOOQ.
*/
package brs.schema.tables;


import brs.schema.Db;
import brs.schema.Indexes;
import brs.schema.Keys;
import brs.schema.tables.records.BlockRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Block extends TableImpl<BlockRecord> {

    private static final long serialVersionUID = -688279780;

    /**
     * The reference instance of <code>DB.block</code>
     */
    public static final Block BLOCK = new Block();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BlockRecord> getRecordType() {
        return BlockRecord.class;
    }

    /**
     * The column <code>DB.block.db_id</code>.
     */
    public final TableField<BlockRecord, Long> DB_ID = createField("db_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>DB.block.id</code>.
     */
    public final TableField<BlockRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>DB.block.version</code>.
     */
    public final TableField<BlockRecord, Integer> VERSION = createField("version", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>DB.block.timestamp</code>.
     */
    public final TableField<BlockRecord, Integer> TIMESTAMP = createField("timestamp", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>DB.block.previous_block_id</code>.
     */
    public final TableField<BlockRecord, Long> PREVIOUS_BLOCK_ID = createField("previous_block_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>DB.block.total_amount</code>.
     */
    public final TableField<BlockRecord, Long> TOTAL_AMOUNT = createField("total_amount", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>DB.block.total_fee</code>.
     */
    public final TableField<BlockRecord, Long> TOTAL_FEE = createField("total_fee", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>DB.block.payload_length</code>.
     */
    public final TableField<BlockRecord, Integer> PAYLOAD_LENGTH = createField("payload_length", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>DB.block.generator_public_key</code>.
     */
    public final TableField<BlockRecord, byte[]> GENERATOR_PUBLIC_KEY = createField("generator_public_key", org.jooq.impl.SQLDataType.VARBINARY(32).nullable(false), this, "");

    /**
     * The column <code>DB.block.previous_block_hash</code>.
     */
    public final TableField<BlockRecord, byte[]> PREVIOUS_BLOCK_HASH = createField("previous_block_hash", org.jooq.impl.SQLDataType.VARBINARY(32), this, "");

    /**
     * The column <code>DB.block.cumulative_difficulty</code>.
     */
    public final TableField<BlockRecord, byte[]> CUMULATIVE_DIFFICULTY = createField("cumulative_difficulty", org.jooq.impl.SQLDataType.BLOB.nullable(false), this, "");

    /**
     * The column <code>DB.block.base_target</code>.
     */
    public final TableField<BlockRecord, Long> BASE_TARGET = createField("base_target", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>DB.block.next_block_id</code>.
     */
    public final TableField<BlockRecord, Long> NEXT_BLOCK_ID = createField("next_block_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>DB.block.height</code>.
     */
    public final TableField<BlockRecord, Integer> HEIGHT = createField("height", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>DB.block.generation_signature</code>.
     */
    public final TableField<BlockRecord, byte[]> GENERATION_SIGNATURE = createField("generation_signature", org.jooq.impl.SQLDataType.VARBINARY(64).nullable(false), this, "");

    /**
     * The column <code>DB.block.block_signature</code>.
     */
    public final TableField<BlockRecord, byte[]> BLOCK_SIGNATURE = createField("block_signature", org.jooq.impl.SQLDataType.VARBINARY(64).nullable(false), this, "");

    /**
     * The column <code>DB.block.payload_hash</code>.
     */
    public final TableField<BlockRecord, byte[]> PAYLOAD_HASH = createField("payload_hash", org.jooq.impl.SQLDataType.VARBINARY(32).nullable(false), this, "");

    /**
     * The column <code>DB.block.generator_id</code>.
     */
    public final TableField<BlockRecord, Long> GENERATOR_ID = createField("generator_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>DB.block.nonce</code>.
     */
    public final TableField<BlockRecord, Long> NONCE = createField("nonce", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>DB.block.ats</code>.
     */
    public final TableField<BlockRecord, byte[]> ATS = createField("ats", org.jooq.impl.SQLDataType.BLOB, this, "");

    /**
     * Create a <code>DB.block</code> table reference
     */
    public Block() {
        this(DSL.name("block"), null);
    }

    /**
     * Create an aliased <code>DB.block</code> table reference
     */
    public Block(String alias) {
        this(DSL.name(alias), BLOCK);
    }

    /**
     * Create an aliased <code>DB.block</code> table reference
     */
    public Block(Name alias) {
        this(alias, BLOCK);
    }

    private Block(Name alias, Table<BlockRecord> aliased) {
        this(alias, aliased, null);
    }

    private Block(Name alias, Table<BlockRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Db.DB;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.BLOCK_BLOCK_GENERATOR_ID_IDX, Indexes.BLOCK_BLOCK_HEIGHT_IDX, Indexes.BLOCK_BLOCK_ID_IDX, Indexes.BLOCK_BLOCK_TIMESTAMP_IDX, Indexes.BLOCK_CONSTRAINT_3C, Indexes.BLOCK_CONSTRAINT_3C5, Indexes.BLOCK_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<BlockRecord, Long> getIdentity() {
        return Keys.IDENTITY_BLOCK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<BlockRecord> getPrimaryKey() {
        return Keys.KEY_BLOCK_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<BlockRecord>> getKeys() {
        return Arrays.<UniqueKey<BlockRecord>>asList(Keys.KEY_BLOCK_PRIMARY, Keys.KEY_BLOCK_BLOCK_ID_IDX, Keys.KEY_BLOCK_BLOCK_TIMESTAMP_IDX, Keys.KEY_BLOCK_BLOCK_HEIGHT_IDX);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<BlockRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<BlockRecord, ?>>asList(Keys.CONSTRAINT_3C, Keys.CONSTRAINT_3C5);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Block as(String alias) {
        return new Block(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Block as(Name alias) {
        return new Block(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Block rename(String name) {
        return new Block(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Block rename(Name name) {
        return new Block(name, null);
    }
}
